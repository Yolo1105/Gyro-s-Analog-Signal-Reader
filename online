#include "mcc_generated_files/mcc.h"

/* Main application *

//prototypes

void initComponents(); //Setup the output pin(s)

void configAI(); //Setup the AI pin(s)

void captureAI(); //Read the AI pin

void setLEDS(uint16_t); //Set LEDs to the AI value

void main(void)

{

// initialize the device

SYSTEM_Initialize();

// When using interrupts, you need to set the Global and Peripheral Interrupt Enable bits

// Use the following macros to:

// Enable the Global Interrupts //INTERRUPT_GlobalInterruptEnable();

// Enable the Peripheral Interrupts //INTERRUPT_PeripheralInterruptEnable();

// Disable the Global Interrupts //INTERRUPT_GlobalInterruptDisable();

// Disable the Peripheral Interrupts //INTERRUPT_PeripheralInterruptDisable();

initComponents(); //Setup Registers

while (1)

{

// Add your application code

captureAI();

__delay_ms(100);

}

}

void initComponents()

{

TRISB = 0x00; //Set PORTB as outputs

PORTB = 0x00; //Clear outputs

configAI();

return;

}

void configAI()

{

//Configure port

TRISA = 0xff; //Set PORTA as inputs

ANSELA = 0X01; //Set RA0 as an AI

//Configure ADC module //b[7] sets right justification, b[6:4] sets CS = FRC,

//b[2]+b[1:0] sets Vss and Vdd as refrences

ADCON1 = 0b11110000;

return;

}

void captureAI()

{

uint8_t delayTime = 20; //20ms acquasition delay

__delay_ms(delayTime);

ADCON0 = 0x01; //Turn ADC on

ADCON0 |= 1 << 1; //set b[1] "go" bit,VAR |= 1 << 3 sets bit 3 fyi

uint8_t doneBit;

do

{

//wait for ADC to complete (go bit switches to 0 automatically when done)

doneBit = (ADCON0 >> 1) & 1;

} while(doneBit); //while go bit is on (AD conversion in progress)

uint16_t result = (ADRESH << 8) | ADRESL; //combine two 8bit values into a 16bit val

setLEDS(result);

ADCON0 = 0x00; //Turn ADC off return;

}

void setLEDS(uint16_t AI)

{

//Light LEDs accordingly

if(AI >= 768) { PORTB = 0x08; }

else if(AI < 768 && AI >= 512 ) { PORTB = 0x04; }

else if(AI < 512 && AI >= 256) { PORTB = 0x02; }

else if(AI < 256 && AI >= 0) { PORTB = 0x01; }

}

/** End of File */
